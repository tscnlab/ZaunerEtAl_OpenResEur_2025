---
title: "Survey: LightLogger form factor and placement"
author: "Johannes Zauner, Anna Biller, Manuel Spitschan"
format: 
  html:
    code-fold: true
    embed-resources: true
    code-tools: true
    toc: true
---

## Preface

This is the analysis for an online survey to gather information about the acceptability of form factor and placements of light loggers. The survey was conducted using Prolific on three days in 2023, each collecting from a different sample (USA, UK, Worldwide).

**This is the third part of the analysis, focusing on the qualitative analysis.**

## Import

The following dataset contains the qualitative answers from the survey. These data were exported as a CSV file and provided to the large language model (LLM) Gemini 2.5 Pro Preview 05-06 (OpenAIGoogle, San FranciscoMountain View, USA).

```{r}
library(tidyverse)
library(gt)
library(glue)
```

Import the dataset that was provided to the LLM.

```{r}
#getting the input and output data of the analysis
data_qual_long <- read_csv("data/cleaned/LightLogger_qual_long.csv")

#this dataset was generated by extracting the qualitative answers from the full survey:
# data_qual <- data |> select(contains("difficulty"), contains("check"), contains("openended"), contains("feedback"))
# and then
# getting the data into a long format
# data_qual_long <- 
# data_qual |> 
#   pivot_longer(everything(), names_to = "question") |> 
#   separate(question, into = c("general", "question", "design")) |> 
#   select(-general) |> 
#   mutate(design = replace_na(design, "general"),
#          question = 
#            case_when(
#              question == "check" ~ "Please describe, in your own words, the placement of
# the light logger in the body.",
#              question == "difficulty" ~ "In what situations or activities do you think wearing the light logger might be difficult",
#              question == "openended" ~ "Can you envision and elaborate on alternative designs for light loggers, specifically focused on enabling continuous wear?",
#              question == "feedback" ~ "Do you have any other comments on this survey?",
#                )
# ) 

```

Import the structured dataset provided by the LLM based on the previous input

```{r}
data_LLM <- read_csv("data/cleaned/qual_analysis_LLM.txt", quote = "\"")

#converting abbreviations to clear names
data_LLM <- data_LLM %>%
  mutate(
    theme_short_name = case_when(
      theme_short_name == "AI" ~ "Activity interference",
      theme_short_name == "SA" ~ "Social acceptability",
      theme_short_name == "CP" ~ "Comfort physical",
      theme_short_name == "AS" ~ "Attachment security",
      theme_short_name == "CI" ~ "Clothing integration",
      theme_short_name == "WR" ~ "Water resistance",
      theme_short_name == "DR" ~ "Durability",
      theme_short_name == "PH" ~ "Preexisting habits",
      theme_short_name == "PP" ~ "Privacy perception",
      theme_short_name == "EU" ~ "Ease of use",
      theme_short_name == "AltSugg" ~ "Alternative suggestions",
      theme_short_name == "BPP" ~ "Body placement perception",
      theme_short_name == "RoM" ~ "Restriction of movement",
      theme_short_name == "SitApp" ~ "Situational appropriateness",
      theme_short_name == "SI" ~ "Sleep interference",
      theme_short_name == "Misc" ~ "Miscellaneous comments",
      theme_short_name == "none" ~ "None",
      TRUE ~ theme_short_name # Default case: keeps original if no match
    ),
    overarching_theme_short_name = case_when(
      overarching_theme_short_name == "OT_PU" ~ "Practicality and usability",
      overarching_theme_short_name == "OT_SAp" ~ "Social and appearance",
      overarching_theme_short_name == "OT_CD" ~ "Comfort and discomfort",
      overarching_theme_short_name == "none" ~ "",
      TRUE ~ overarching_theme_short_name # Default case
    )
  )
```

## Relating LLM export and survey data

```{r}
#some example output (Relevant question: 
#1. In what situations or activities do you think wearing
#the light logger might be difficult?

data_qual_long |> head() |> gt()

#check which answers show up in the survey, but not in the LLM summary
data_analysis_long <-
data_qual_long |> 
  tibble::add_column(instances = {
data_qual_long$value |> 
  set_names() |> 
  map_vec(
    \(x) data_LLM |> 
      filter(
        if_any(
          everything(), 
          \(y) str_detect(y, fixed(x, ignore_case = TRUE)))) |> nrow()
  )
  }) 

#checking for non-matches in the LLM output
data_analysis_long|> 
  filter(instances == 0) |> 
  drop_na(value) |> 
  gt()
```

The output above having on rows means that all answers in the survey are covered at least once in the thematic analysis.

```{r}
#check which answers show up in the LLM summary, but not in the survey
data_analysis_long2 <-
data_LLM |> 
  tibble::add_column(instances = {
data_LLM$value |> 
  set_names() |> 
  map_vec(
    \(x) data_qual_long |> 
      filter(
        if_any(
          everything(), 
          \(y) str_detect(y, fixed(x, ignore_case = TRUE)))) |> nrow()
  )
  }) 

#checking for non-matches in the survey
data_analysis_long2|> 
  filter(instances == 0) |> 
  drop_na(value) |> 
  gt()
```

*Note: the string: "A ring or an earring would make the light logger nearly invisible to other people but it would also capture less of the surrounding [...]" does show up in the original survey answers, but commas had to be removed or CSV import would fail for this row for some unknown reason. Thus the answers are categorized as not appearing in the original survey, but does actually."

This means that all answers in the LLM export have their counterpart in the original survey data.

## Testing samples thematic claims

Sampling themes and supporting quotes to test logical link (execute as often as necessary)

```{r}
data_analysis_long2 |> 
  group_by(theme_short_name) |> 
  slice_sample(n=2) |> 
  gt()
```


```{r}
#count the number of answers and save table
link <- "https://github.com/tscnlab/ZaunerEtAl_ComputHumanBehav_2025/blob/main/data/cleaned/qual_analysis_LLM.txt"

table <-
data_analysis_long2 |> 
  group_by(design, overarching_theme_short_name, theme_short_name) |> 
  mutate(design = factor(design, levels = 
                           c("general", "chestpin", "wrist", "necklace", 
                             "sleevecollar", "collarpin", "neckloop", 
                             "hatpin", "glasses"),
                         labels =  c("General", "Chest pin", "Wrist", "Necklace", 
                             "Sleeve collar", "Collar pin", "Neck loop", 
                             "Hatpin", "Glasses")
                         )
         ) |> 
  count(overarching_theme_explanation, theme_explanation) |>
  pivot_wider(values_from = n, names_from = design) |> 
  group_by(overarching_theme_short_name = 
             paste(overarching_theme_short_name, overarching_theme_explanation, sep = ":")
           ) |> 
  mutate(overarching_theme_short_name = 
           ifelse(overarching_theme_short_name == ":N/A", 
                  "",
                  overarching_theme_short_name)
         ) |> 
  filter(theme_short_name != "None") |> 
  gt(rowname_col = "theme_short_name") |> 
  tab_header("Thematic analysis", 
             subtitle = "Number of participant-replies per theme") |> 
  fmt_missing() |> 
  # cols_width(theme_explanation ~ 500) |> 
  cols_label(theme_explanation ~ "") |> 
  cols_hide(overarching_theme_explanation) |> 
  tab_footnote(glue("A complete list of participant answers sorted into themes can be found at: {link}"))

table

table |> gtsave("output/02_tables/table_5_thematic.png", vwidth = 1000)

```

